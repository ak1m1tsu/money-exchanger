// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	context "context"

	data "github.com/romankravchuk/currency-exchanger/internal/data"
	mock "github.com/stretchr/testify/mock"
)

// CurrencyServicer is an autogenerated mock type for the CurrencyServicer type
type CurrencyServicer struct {
	mock.Mock
}

// ConvertCurrency provides a mock function with given fields: _a0, _a1
func (_m *CurrencyServicer) ConvertCurrency(_a0 context.Context, _a1 *data.ConvertQuery) (*data.ConvertResult, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *data.ConvertResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *data.ConvertQuery) (*data.ConvertResult, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *data.ConvertQuery) *data.ConvertResult); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*data.ConvertResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *data.ConvertQuery) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRates provides a mock function with given fields: _a0, _a1
func (_m *CurrencyServicer) GetRates(_a0 context.Context, _a1 *data.RatesQuery) (*data.CurrencyRates, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *data.CurrencyRates
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *data.RatesQuery) (*data.CurrencyRates, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *data.RatesQuery) *data.CurrencyRates); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*data.CurrencyRates)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *data.RatesQuery) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCurrencyServicer interface {
	mock.TestingT
	Cleanup(func())
}

// NewCurrencyServicer creates a new instance of CurrencyServicer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCurrencyServicer(t mockConstructorTestingTNewCurrencyServicer) *CurrencyServicer {
	mock := &CurrencyServicer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
