// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	context "context"

	data "github.com/romankravchuk/currency-exchanger/internal/data"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// CurrencyRatesStorage is an autogenerated mock type for the CurrencyRatesStorage type
type CurrencyRatesStorage struct {
	mock.Mock
}

// Find provides a mock function with given fields: _a0, _a1
func (_m *CurrencyRatesStorage) Find(_a0 context.Context, _a1 string) (*data.CurrencyRates, bool, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *data.CurrencyRates
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*data.CurrencyRates, bool, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *data.CurrencyRates); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*data.CurrencyRates)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) bool); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Store provides a mock function with given fields: _a0, _a1, _a2
func (_m *CurrencyRatesStorage) Store(_a0 context.Context, _a1 *data.CurrencyRates, _a2 time.Duration) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *data.CurrencyRates, time.Duration) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewCurrencyRatesStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewCurrencyRatesStorage creates a new instance of CurrencyRatesStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCurrencyRatesStorage(t mockConstructorTestingTNewCurrencyRatesStorage) *CurrencyRatesStorage {
	mock := &CurrencyRatesStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
